[{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pepijn-devries.github.io/ggfields/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pepijn-devries.github.io/ggfields/articles/angle_correction.html","id":"a-matter-of-perspective","dir":"Articles","previous_headings":"","what":"A matter of perspective","title":"Angle Correction","text":"data set vector angles specified, important realise angle frame reference. instance specify angle xy-plane (e.g. 30 degrees North) plot plane aspect ratio 1:2 (.e., values y-axis twice tall x-axis), angle changes. plot original angle 30 degrees North appear 15 degrees due aspect ratio. true specify geographical directions spherical coordinates, angles change plot different projection spherical coordinates squashed flat surface plot. can illustrated setting spatial grid vectors point Northwards: Note plot WGS84 lon lat projection (.e., spherical coordinates), arrows point upwards:  Now plot data UTM (zone 31 N meters, EPSG code 32631), without correction (red) correction (green), see happens:  Remember reality (plot) parallels latitude converge North Pole. don’t correct angles zero degrees (red), still point upwards, projection plot doesn’t make sense (don’t point towards North Pole). can see correction, arrows point North Pole follow curved parallels latitude.","code":"north_arrows <-   expand.grid(     x = seq(-5, 15, length.out = 10),     y = seq(89.85, 89.9, length.out = 10)   ) |>   sf::st_as_sf(coords = c(\"x\", \"y\"), crs = 4326) |>   sf::st_make_grid() |>   stars::st_as_stars(nx = 10, ny = 10) |>   dplyr::mutate(angle = 0*(2*pi/360)) library(ggfields) library(ggplot2) theme_set(theme_light())  ggplot() +   geom_fields(data = north_arrows, aes(angle = angle), radius = 1) #> Angle correction between 0.00 and 0.00 radials no_correction <-     geom_fields(data = north_arrows, aes(angle = angle, col = \"no correction\"), radius = 1,               .angle_correction = NULL,               max_radius = ggplot2::unit(0.7, \"cm\"))  p <-   ggplot() +   theme(legend.position = \"top\") +   labs(colour = NULL)  p +   no_correction +   geom_fields(data = north_arrows, aes(angle = angle, col = \"corrected\"), radius = 1,               max_radius = ggplot2::unit(0.7, \"cm\")) +   scale_colour_manual(values = c(`no correction` = \"red\", corrected = \"green\")) +   coord_sf(crs = 32631) #> Angle correction between -0.19 and 0.12 radials"},{"path":[]},{"path":"https://pepijn-devries.github.io/ggfields/articles/angle_correction.html","id":"default-correction","dir":"Articles","previous_headings":"Correction mechanism of ggfield","what":"Default correction","title":"Angle Correction","text":"ggfield uses angle_correction() function correct angles. data coordinate reference system (see sf::st_crs()) specified, assumed angles specified relation Earth’s spherical lon-lat coordinates. cases, assumed angle specified xy-plane given coordinates specified ggplot2::aes(). latter case, angles corrected aspect ratio plot. angle_correction() function passed .angle_correction argument geom_fields() function. correction function called plot rendered. argument set NULL correction applied (see red arrows plot ).","code":""},{"path":"https://pepijn-devries.github.io/ggfields/articles/angle_correction.html","id":"custom-correction","dir":"Articles","previous_headings":"Correction mechanism of ggfield","what":"Custom correction","title":"Angle Correction","text":"also possible provide custom correction function. just need define function accepts arguments data, panel_params, coord. function return modified version data.frame data contains column named angle_correction. angle_correction contain numeric radials added original angle. Let’s say want custom correction function rotates angles 90 degrees (pi/2 radials), look like :","code":"custom_correct <- function(data, panel_params, coord) {   data |> dplyr::mutate(angle_correction = pi/2) }  no_correction[[1]]$geom_params$max_radius <-   ggplot2::unit(0.3, \"cm\")  p +   no_correction +   geom_fields(data = north_arrows, aes(angle = angle, col = \"custom correction\"),               radius = 1, .angle_correction = custom_correct,               max_radius = ggplot2::unit(0.3, \"cm\")) +   scale_colour_manual(values = c(`no correction` = \"red\",                                  `custom correction` = \"orange\"))"},{"path":"https://pepijn-devries.github.io/ggfields/articles/angle_correction.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Angle Correction","text":"take home message angles data defined certain perspective, ggfield knows nothing. Although default angle_correction() function best correct angles plot, make sure corrections actually make sense.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/ggfields/articles/radius_aes.html","id":"size-does-matter","dir":"Articles","previous_headings":"Radius scales and guides","what":"Size does matter","title":"Radius Aesthetics","text":"vector radius (.e., length) angle (direction). depict vector field, radius often specific meaning: reflects certain magnitude. instance, vector can represent magnitude direction velocity. help audience read plot knew magnitudes length arrows plot represent. ggfields provides legend key radius aesthetic specified ggplot2::aes(). order provide frame reference, need specify max_radius call geom_fields() (default 0.5 cm). max_radius absolute relative length unit (grid::unit()). Arrows vector field scaled zero max_radius. max_radius also used scale arrows legend keys. Note axes trained size vectors (vector origins). need expand x y scales manually vectors cut . Also max_radius larger key width, may run visual problems. large max_radius values increase key width manually, shown example .","code":"library(ggplot2) library(ggfields) library(stars) theme_set(theme_light()) data(\"seawatervelocity\")  p <-   ggplot() +   geom_fields(     aes(radius = as.numeric(v),         angle  = as.numeric(angle)),     seawatervelocity[,3:11,6:11],     max_radius = grid::unit(1.5, \"cm\")) +   labs(radius  = \"v [m/s]\") +   ## We have to increase the 'keywidth' as otherwise `max_radius` won't fit:   guides(radius = guide_legend(keywidth = grid::unit(1.5, \"cm\"))) p"},{"path":"https://pepijn-devries.github.io/ggfields/articles/radius_aes.html","id":"stay-positive","dir":"Articles","previous_headings":"Radius scales and guides","what":"Stay positive","title":"Radius Aesthetics","text":"important radius wish plot non-negative values. impossible distinguish vector negative magnitude vector positive magnitude angle rotate 180 degrees (.e, vector radius = 1 angle = 0 look vector radius = -1 angle = pi). Therefore, plot, tell vectors positive negative value. geom_fields() throw error try plot negative radii. also need careful transformations. Although, technically possible log-transform radii, might run problems due potentially resulting negative values. also wonder whether transformed values accurately convey information magnitude vectors. considering apply transformations, try using binned discrete scales instead.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/articles/radius_aes.html","id":"one-key-to-rule-them-all","dir":"Articles","previous_headings":"Radius scales and guides","what":"One key to rule them all","title":"Radius Aesthetics","text":"radius key guide legend can combined one key many aesthetics, colour, linewidth, linetype, etc. make sure aesthetics use assigned variable use ggplot2::guide_legend(). example illustrates colour linewidth can combined radius one legend.","code":"p +   aes(col = as.numeric(v), linewidth = as.numeric(v)) +   ## Let's give the aesthetics all the same name   labs(col = \"v [m/s]\", linewidth = \"v [m/s]\") +   ## Make sure that the colour aesthetic uses the same guide as radius (\"legend\")   scale_colour_viridis_c(guide = \"legend\") +   ## Make sure all keys have the same width   guides(colour    = guide_legend(keywidth = grid::unit(1.5, \"cm\")),          linewidth = guide_legend(keywidth = grid::unit(1.5, \"cm\")))"},{"path":"https://pepijn-devries.github.io/ggfields/articles/radius_aes.html","id":"vector-components","dir":"Articles","previous_headings":"","what":"Vector components","title":"Radius Aesthetics","text":"x y component vector instead angle radius? Can provide components aesthetics geom_fields()? Unfortunately, answer . least directly, radius required early data wrangling machinery ggplot2::ggplot(). However, x y components vector can easily converted angle radius, shown example .","code":"ggplot() +   geom_fields(aes(radius = as.numeric(pythagoras(vo, uo)),                   angle  = atan2(as.numeric(vo), as.numeric(uo))),               seawatervelocity)"},{"path":"https://pepijn-devries.github.io/ggfields/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pepijn de Vries. Author, maintainer.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries P (2024). ggfields: Add Vector Field Layers Ggplots. R package version 0.0.6.0003, https://github.com/pepijn-devries/ggfields/, https://pepijn-devries.github.io/ggfields/.","code":"@Manual{,   title = {ggfields: Add Vector Field Layers to Ggplots},   author = {Pepijn {de Vries}},   year = {2024},   note = {R package version 0.0.6.0003, https://github.com/pepijn-devries/ggfields/},   url = {https://pepijn-devries.github.io/ggfields/}, }"},{"path":[]},{"path":"https://pepijn-devries.github.io/ggfields/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Add Vector Field Layers to Ggplots","text":"Add vector field layers ggplot2::ggplot(). Although similarities ggplot2::geom_spoke(), ggfields offers distinct features: radius aesthetic mapped scale therefore can added guides (see vignette(\"radius_aes\")). data.frames supported, also geometric data (sf::st_sf() stars::st_as_stars()). Corrects angles displayed aspect ratio coordinate system (see vignette(\"angle_correction\")).","code":""},{"path":"https://pepijn-devries.github.io/ggfields/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Add Vector Field Layers to Ggplots","text":"Get CRAN version Get development version r-universe","code":"install.packages(\"ggfields\") install.packages(\"ggfields\", repos = c(\"https://pepijn-devries.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://pepijn-devries.github.io/ggfields/index.html","id":"adding-vector-fields-to-a-map","dir":"","previous_headings":"","what":"Adding vector fields to a map","title":"Add Vector Field Layers to Ggplots","text":"example shows seawater current data can added map:","code":"library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.3.3 library(ggfields) library(ggspatial) ## For annotating with Open Street Map data(seawatervelocity)  ggplot() +   ggspatial::annotation_map_tile(     alpha      = 0.25,     cachedir   = tempdir()) +   geom_fields(     data       = seawatervelocity,     aes(radius = as.numeric(v),         angle  = as.numeric(angle),         colour = as.numeric(v)),     max_radius = grid::unit(0.7, \"cm\")) +   labs(colour  = \"v[m/s]\",        radius  = \"v[m/s]\") +   scale_radius_binned() +   scale_colour_viridis_b(guide = guide_bins())"},{"path":"https://pepijn-devries.github.io/ggfields/index.html","id":"simple-dataframes","dir":"","previous_headings":"","what":"Simple data.frames","title":"Add Vector Field Layers to Ggplots","text":"Vector arrows can also added simple plots x y data:","code":"## First generate some arbitrary data to plot: n  <- 10 df <- data.frame(x = seq(0, 100, length.out = n), y = rnorm(n),                  ang = seq(0, 2*pi, length.out = n)) df$len <- 2 + df$y + rnorm(n)/4  ggplot(df, aes(x = x, y = y)) +   geom_line() +   geom_fields(aes(angle = ang, radius = len), .angle_correction = NULL)"},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate correction for angle in the plot coordinate system — angle_correction","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"angle vector may distorted plot uses different coordinate system one angle specified. data simple feature object (sf), angle corrected displayed coordinate reference system (crs). crs missing, aspect ratio 1 assumed. data, angle corrected aspect ratio plot.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"","code":"angle_correction(data, panel_params, coord)"},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"data fortified data used geom_fields(). least contain numeric columns x, y angle. panel_params panel parameters returned GeomFields$setup_params() coord coord object.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"data.frame additional angle_correction column. corrected angle given angle_correction + angle.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"function used default geom_fields(). details correction required customize corrections please see vignette(\"angle_correction\").","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/angle_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate correction for angle in the plot coordinate system — angle_correction","text":"","code":"## Create a data.frame with some xy-coordinates and all angles pointing North (0 degrees) d <-   data.frame(     x = seq(1, 2, 0.1),     y = seq(50, 51, 0.1),     angle = 0   ) |>   sf::st_as_sf(coords = c(\"x\", \"y\"), crs = 4326, remove = FALSE)  ## Create a mockup of ggplot params. Normally this is handled automatically by ggplot2 params_mockup <-   c(     ggplot2::ggplot() + geom_fields(),     list(       x_range = range(d$x),       y_range = range(d$y),       crs = sf::st_crs(4326),       default_crs = 4326     )   )  ## When plotting as lon-lat, the angle correction will be zero angle_correction(d, params_mockup, ggplot2::coord_sf(default_crs = 4326)) #> Angle correction between 0.00 and 0.00 radials #> Simple feature collection with 11 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 50 xmax: 2 ymax: 51 #> Geodetic CRS:  WGS 84 #> First 10 features: #>      x    y angle         geometry angle_correction #> 1  1.0 50.0     0     POINT (1 50)                0 #> 2  1.1 50.1     0 POINT (1.1 50.1)                0 #> 3  1.2 50.2     0 POINT (1.2 50.2)                0 #> 4  1.3 50.3     0 POINT (1.3 50.3)                0 #> 5  1.4 50.4     0 POINT (1.4 50.4)                0 #> 6  1.5 50.5     0 POINT (1.5 50.5)                0 #> 7  1.6 50.6     0 POINT (1.6 50.6)                0 #> 8  1.7 50.7     0 POINT (1.7 50.7)                0 #> 9  1.8 50.8     0 POINT (1.8 50.8)                0 #> 10 1.9 50.9     0 POINT (1.9 50.9)                0  ## Transform to UTM zone 31N in meters d2 <- d |> sf::st_transform(32631)  ## Again get parameter mockup values params_mockup2 <-   c(     ggplot2::ggplot() + geom_fields(),       list(         x_range = range(sf::st_coordinates(d2)[,1]),         y_range = range(sf::st_coordinates(d2)[,1]),         crs = sf::st_crs(32631),         default_crs = 4326       )     ) ## in UTM projection in this area (which is slightly tilted) the correction is ## larger than zero angle_correction(d2, params_mockup2,                  ggplot2::coord_sf(crs = 32631, default_crs = 4326)) #> Angle correction between 0.01 and 0.03 radials #> Simple feature collection with 11 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 356670.9 ymin: 5540547 xmax: 429831.1 ymax: 5650301 #> Projected CRS: WGS 84 / UTM zone 31N #> First 10 features: #>      x    y angle                 geometry angle_correction #> 1  1.0 50.0     0 POINT (356670.9 5540547)       0.02674472 #> 2  1.1 50.1     0 POINT (364119.6 5551478)       0.02544421 #> 3  1.2 50.2     0   POINT (371539 5562419)       0.02413979 #> 4  1.3 50.3     0   POINT (378929 5573369)       0.02283147 #> 5  1.4 50.4     0 POINT (386289.6 5584330)       0.02151924 #> 6  1.5 50.5     0 POINT (393620.7 5595300)       0.02020311 #> 7  1.6 50.6     0 POINT (400922.2 5606280)       0.01888310 #> 8  1.7 50.7     0 POINT (408194.1 5617271)       0.01755922 #> 9  1.8 50.8     0 POINT (415436.2 5628271)       0.01623147 #> 10 1.9 50.9     0 POINT (422648.6 5639281)       0.01489986"},{"path":"https://pepijn-devries.github.io/ggfields/reference/annotation_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a ggplot with vector fields — annotation_fields","title":"Annotate a ggplot with vector fields — annotation_fields","text":"Functions exactly geom_fields(), difference function train x y scales. makes data central, uses layer support . Consequently, annotation_fields() accept stat argument.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/annotation_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a ggplot with vector fields — annotation_fields","text":"","code":"annotation_fields(   mapping = NULL,   data = NULL,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   max_radius = ggplot2::unit(0.5, \"cm\"),   .angle_correction = angle_correction,   arrow = grid::arrow(length = ggplot2::unit(0.2, \"cm\")),   inherit.aes = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/ggfields/reference/annotation_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a ggplot with vector fields — annotation_fields","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Can one four things: NULL: case data parent ggplot call inherited. data.frame: need assign x y aesthetics. sf object: contain geometry column POINT geometries. stars object: converted automatically sf object. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. max_radius Maximum radius radius aesthetic scaled plot. can use absolute (\"e.g., \"cm\", \"\", \"pt\") relative (\"npc\") units set value. Default 0.5 cm. .angle_correction Function correct angle aesthetics projection /aspect ratio used plot. set NULL angle corrected treated angle final plot. custom function can provided accept least three arguments (data, panel_params coord). See angle_correction() vignette(\"angle_correction\") details. arrow specification arrow heads, created grid::arrow(). inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/annotation_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a ggplot with vector fields — annotation_fields","text":"ggplot2::layer_sf().","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/annotation_fields.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Annotate a ggplot with vector fields — annotation_fields","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/annotation_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a ggplot with vector fields — annotation_fields","text":"","code":"if (requireNamespace(\"stars\") && requireNamespace(\"ggplot2\")) {   library(stars)   library(ggplot2)    data(\"seawatervelocity\")   sw_sub <- seawatervelocity[,8:13,1:5]      ## Note that the `seawatervelocity` spans a much larger area,   ## but the plot only focuses on `sw_sub`   ggplot() +     geom_stars(data = sw_sub) +     annotation_fields(data = seawatervelocity,                       aes(angle = as.numeric(atan2(vo, uo)),                           radius = as.numeric(pythagoras(uo, vo)))) +     labs(radius = \"v [m/s]\") } #> Loading required package: abind #> Loading required package: sf #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> Angle correction between 0.00 and 0.00 radials"},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Key glyphs for 'radius' legends — draw_key_fields","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"geom associated function draws key geom needs displayed legend. functions called draw_key_*(), * stands name respective key glyph. key glyphs can customized individual geoms providing geom key_glyph argument (see layer() examples .)","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"","code":"draw_key_fields(data, params, size)"},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"data single row data frame containing scaled aesthetics display key params list additional parameters supplied geom. size Width height key mm.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"grid grob","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"layer geom_fields() allows special aesthetic radius. function draws key glyph aesthetics, radius arrow corresponds scalar value listed radius. Note width key glyph adjusted aesthetic . Therefore, max_radius parameter exceeds glyph width, need change width guides , see vignette(\"radius_aes\") details.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/draw_key_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Key glyphs for 'radius' legends — draw_key_fields","text":"","code":"if (requireNamespace(\"ggplot2\")) {   library(ggplot2)   p <- ggplot(economics, aes(date, psavert, color = \"savings rate\"))   p + geom_line(key_glyph = \"fields\") }"},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrows depicting a vector field — GeomFields","title":"Arrows depicting a vector field — GeomFields","text":"Visualise vector fields (, electric/magnetic fields, wind speed, water currents) arrows layer ggplot.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrows depicting a vector field — GeomFields","text":"","code":"GeomFields  geom_fields(   mapping = NULL,   data = NULL,   stat = \"fields\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   max_radius = ggplot2::unit(0.5, \"cm\"),   .angle_correction = angle_correction,   arrow = grid::arrow(length = ggplot2::unit(0.2, \"cm\")),   inherit.aes = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Arrows depicting a vector field — GeomFields","text":"object class GeomFields (inherits GeomSegment, Geom, ggproto, gg) length 8.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrows depicting a vector field — GeomFields","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Can one four things: NULL: case data parent ggplot call inherited. data.frame: need assign x y aesthetics. sf object: contain geometry column POINT geometries. stars object: converted automatically sf object. stat statistical transformation use data layer. default set GeomFields() (\"fields\"). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. max_radius Maximum radius radius aesthetic scaled plot. can use absolute (\"e.g., \"cm\", \"\", \"pt\") relative (\"npc\") units set value. Default 0.5 cm. .angle_correction Function correct angle aesthetics projection /aspect ratio used plot. set NULL angle corrected treated angle final plot. custom function can provided accept least three arguments (data, panel_params coord). See angle_correction() vignette(\"angle_correction\") details. arrow specification arrow heads, created grid::arrow(). inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrows depicting a vector field — GeomFields","text":"layer can added ggplot.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arrows depicting a vector field — GeomFields","text":"Adds layer vector fields ggplot. order achieve two special aesthetic required: radius angle.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Arrows depicting a vector field — GeomFields","text":"geometry|x: Either geometry column x coordinate. case geometry column class sf::sfc_POINT. case x, numeric vector, aesthetic y needs specified well. specifies location origin vector. radius: aesthetic used scale radius vector arrows field wish display. maximum radius arrows given parameter max_radius. See vignette(\"radius_aes\") details. angle: aesthetic represent angles vectors field radians. Contrary mathematical definition, angle 0 radians point upwards (instead right). chosen geographical applications angle zero degrees points Northwards. plotting angles corrected function passed .angle_correction argument. See vignette(\"angle_corrections) details. y: aesthetic needs used combination x aesthetic. needs numeric vector. fill: See vignette(\"ggplot2-specs\", \"ggplot2\") colour: See vignette(\"ggplot2-specs\", \"ggplot2\") linetype: See vignette(\"ggplot2-specs\", \"ggplot2\") linewidth: See vignette(\"ggplot2-specs\", \"ggplot2\") alpha: variable control opacity element.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrows depicting a vector field — GeomFields","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/geom_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrows depicting a vector field — GeomFields","text":"","code":"data(seawatervelocity)  if (requireNamespace(\"ggplot2\") && requireNamespace(\"stars\") &&       requireNamespace(\"scales\")) {   library(ggplot2)   library(stars)      sw_df <- as.data.frame(seawatervelocity)   ggplot(sw_df, aes(x = x, y = y, radius = as.numeric(v), angle = as.numeric(angle))) +     geom_fields(max_radius = unit(0.5, \"cm\"), na.rm = TRUE)      ggplot() +     geom_fields(data    = seawatervelocity,                 mapping = aes(radius = as.numeric(v),                               angle  = as.numeric(angle),                               col    = as.numeric(v)),                 max_radius = unit(0.5, \"cm\")) +     scale_colour_viridis_c() } #> Angle correction between 0.00 and 0.00 radials"},{"path":"https://pepijn-devries.github.io/ggfields/reference/ggfields-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggfields: Add Vector Field Layers to Ggplots — ggfields-package","title":"ggfields: Add Vector Field Layers to Ggplots — ggfields-package","text":"Add vector field layers ggplots. Ideal visualising wind speeds, water currents, electric/magnetic fields, etc. Accepts data.frames, simple features (sf), spatiotemporal arrays (stars) objects input. Vector fields depicted arrows starting specified locations, specified angles radii.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/ggfields/reference/ggfields-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggfields: Add Vector Field Layers to Ggplots — ggfields-package","text":"Maintainer: Pepijn de Vries pepijn.devries@outlook.com (ORCID)","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/pythagoras.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to calculate vector lengths — pythagoras","title":"A helper function to calculate vector lengths — pythagoras","text":"Calculates length vector using Pythagorean theorem.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/pythagoras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to calculate vector lengths — pythagoras","text":"","code":"pythagoras(x, y)"},{"path":"https://pepijn-devries.github.io/ggfields/reference/pythagoras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to calculate vector lengths — pythagoras","text":"x numeric vector length y. represent lengths first leg (cathetus) right triangles. y numeric vector length x. represent lengths second leg (cathetus) right triangles.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/pythagoras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to calculate vector lengths — pythagoras","text":"Returns numeric vector length x y, reflecting lengths hypotenuse right triangles.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/pythagoras.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A helper function to calculate vector lengths — pythagoras","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/pythagoras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A helper function to calculate vector lengths — pythagoras","text":"","code":"pythagoras(x = c(1, 2), y = c(1, 2)) #> [1] 1.414214 2.828427"},{"path":"https://pepijn-devries.github.io/ggfields/reference/scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector field radius scales — scale_radius_continuous","title":"Vector field radius scales — scale_radius_continuous","text":"Scales set visualisation radius aesthetic. scales also automatically used plot guides. Note scale_radius_identity() exist impossible relate scale max_radius parameter. details see vignette(\"radius_aes\").","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector field radius scales — scale_radius_continuous","text":"","code":"scale_radius_continuous(..., range = c(1e-08, 1))  scale_radius_binned(..., range = c(1e-08, 1))  scale_radius_discrete(..., range = c(1e-08, 1))"},{"path":"https://pepijn-devries.github.io/ggfields/reference/scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector field radius scales — scale_radius_continuous","text":"... Arguments passed underpinning ggplot2::scale_* functions. range Relative output range radii. Must lie 0 1.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector field radius scales — scale_radius_continuous","text":"object class Scale.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/scale.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector field radius scales — scale_radius_continuous","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector field radius scales — scale_radius_continuous","text":"","code":"if (requireNamespace(\"ggplot2\")) {   library(ggplot2)   data(seawatervelocity)      g_num <-     ggplot() +     geom_fields(data = seawatervelocity,                 aes(radius = as.numeric(v), angle = as.numeric(angle)))   g_discr <-     ggplot() +     geom_fields(data = seawatervelocity,                 aes(radius = cut(as.numeric(v), 4), angle = as.numeric(angle)))                    g_num + scale_radius_continuous()   g_num + scale_radius_binned()   g_discr + scale_radius_discrete() } #> Angle correction between 0.00 and 0.00 radials"},{"path":"https://pepijn-devries.github.io/ggfields/reference/seawatervelocity.html","id":null,"dir":"Reference","previous_headings":"","what":"A small subset of the global ocean physics analysis and forecast product — seawatervelocity","title":"A small subset of the global ocean physics analysis and forecast product — seawatervelocity","text":"small subset ocean currents data retrieved CopernicusMarine source listed serving example.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/seawatervelocity.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A small subset of the global ocean physics analysis and forecast product — seawatervelocity","text":"stars object x, y, depth time dimensions. attributes vo (northward seawater velocity [m/s]) uo (eastward seawater velocity [m/s]).","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/seawatervelocity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A small subset of the global ocean physics analysis and forecast product — seawatervelocity","text":"E.U. Copernicus Marine Service Information; Global Ocean Physics Analysis Forecast - GLOBAL_ANALYSISFORECAST_PHY_001_024 (2016-10-14). doi:10.48670/moi-00016","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/seawatervelocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A small subset of the global ocean physics analysis and forecast product — seawatervelocity","text":"","code":"data(\"seawatervelocity\")"},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Stat method for geom_fields — StatFields","title":"Stat method for geom_fields — StatFields","text":"Prepares data handled geom_fields()","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stat method for geom_fields — StatFields","text":"","code":"StatFields  stat_fields(   mapping = NULL,   data = NULL,   geom = \"fields\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stat method for geom_fields — StatFields","text":"object class StatFields (inherits StatSf, Stat, ggproto, gg) length 3.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stat method for geom_fields — StatFields","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Can one four things: NULL: case data parent ggplot call inherited. data.frame: need assign x y aesthetics. sf object: contain geometry column POINT geometries. stars object: converted automatically sf object. geom layer type data prepared. case \"fields\". position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stat method for geom_fields — StatFields","text":"Returns layer can modified geom_fields().","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stat method for geom_fields — StatFields","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggfields/reference/stat_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stat method for geom_fields — StatFields","text":"","code":"stat_fields() #> geom_fields: na.rm = FALSE #> stat_fields: na.rm = FALSE #> position_identity"},{"path":"https://pepijn-devries.github.io/ggfields/news/index.html","id":"ggfields-v0060003","dir":"Changelog","previous_headings":"","what":"ggfields v0.0.6.0003","title":"ggfields v0.0.6.0003","text":"Fixed test Added tests Added test coverage workflow codecov badge","code":""},{"path":"https://pepijn-devries.github.io/ggfields/news/index.html","id":"ggfields-v006","dir":"Changelog","previous_headings":"","what":"ggfields v0.0.6","title":"ggfields v0.0.6","text":"CRAN release: 2024-02-26 tweaks pkgdown website Fixes pass CRAN checks","code":""},{"path":"https://pepijn-devries.github.io/ggfields/news/index.html","id":"ggfields-v003","dir":"Changelog","previous_headings":"","what":"ggfields v0.0.3","title":"ggfields v0.0.3","text":"CRAN release: 2024-02-02 Initial release Features add vector fields ggplot","code":""}]
